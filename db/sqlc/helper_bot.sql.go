// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: helper_bot.sql

package db

import (
	"context"
)

const createCommand = `-- name: CreateCommand :one
INSERT INTO commands (
  cmd
) VALUES (
  $1
) RETURNING id
`

func (q *Queries) CreateCommand(ctx context.Context, cmd string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCommand, cmd)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCommand = `-- name: DeleteCommand :exec
DELETE FROM commands
WHERE id = $1
`

func (q *Queries) DeleteCommand(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommand, id)
	return err
}

const getCommand = `-- name: GetCommand :one
SELECT id, cmd, created_at FROM commands
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCommand(ctx context.Context, id int64) (Command, error) {
	row := q.db.QueryRowContext(ctx, getCommand, id)
	var i Command
	err := row.Scan(&i.ID, &i.Cmd, &i.CreatedAt)
	return i, err
}

const listCommands = `-- name: ListCommands :many
SELECT id, cmd, created_at FROM commands
ORDER BY id
`

func (q *Queries) ListCommands(ctx context.Context) ([]Command, error) {
	rows, err := q.db.QueryContext(ctx, listCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Command
	for rows.Next() {
		var i Command
		if err := rows.Scan(&i.ID, &i.Cmd, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommand = `-- name: UpdateCommand :one
UPDATE commands
SET cmd = $2
WHERE id = $1
RETURNING id, cmd, created_at
`

type UpdateCommandParams struct {
	ID  int64  `json:"id"`
	Cmd string `json:"cmd"`
}

func (q *Queries) UpdateCommand(ctx context.Context, arg UpdateCommandParams) (Command, error) {
	row := q.db.QueryRowContext(ctx, updateCommand, arg.ID, arg.Cmd)
	var i Command
	err := row.Scan(&i.ID, &i.Cmd, &i.CreatedAt)
	return i, err
}
